'''

[실습3 해설] 회원가입

회원가입
이제는 여러분이 지금까지 import해서 사용한 User 클래스를 구현해 보겠습니다. 이 실습에서는 간단히 사용자의 기본 틀을 잡고, 이번 주의 프로젝트에서 더 실제 같은 사용자 클래스를 구현할 예정입니다. 가벼운 마음으로 시작해 봅시다.

User 클래스는 다음과 같은 속성들을 가집니다.

email: 사용자의 이메일 주소 (이메일 형식에 맞는 문자열)
password: 사용자의 비밀번호 (8자리 이상의 문자열)
name: 사용자의 이름 (공백이 아닌 문자열)
gender: 성별 (문자열 M, F, O 중 하나)
friends: 친구 목록 (User 인스턴스의 리스트)
User 클래스의 생성자는 이메일 주소, 비밀번호, 이름, 성별을 순서대로 받습니다. 조건에 맞지 않는 값이 인자로 들어올 경우 적절한 에러 메시지와 함께 ValueError를 발생시킵니다. 사용자 생성 시점에 친구 목록은 비어 있어야 합니다.

조건에 맞게 User 클래스를 완성했다면, 직접 인스턴스를 만들어 여러분의 코드를 테스트해 보세요. 잘 작동한다면 제출 버튼을 눌러 채점해 봅시다.


이메일이 형식에 알맞은지 확인할 때는, 여러분이 지난 주에 구현한 validate_email() 함수를 사용합시다. 코드의 맨 윗줄에 import 되어 있습니다.


'''
from validators import validate_email # email validation(이상한 메일 확인)

class User: # User Class 설정 
    
    def __init__(self,email,password,name,gender): # 멤버 정의하기 (생성자는 friends받지 않음)
    
        # 이메일이 형식에 맞는지 확인하고, 설정합니다. (함수를 만드는 이유 사전검증, 호출)
        if not validate_email(email):
            raise ValueError('이메일 형식에 맞지 않습니다')
        self.email = email
        
        # 비밀번호가 조건을 만족하는지 확인하고, 설정합니다.
        if type(password) is not str or len(password) < 8: #문자열이 아닌것에 대해 길이 확인 필요 (무한루프)
            raise ValueError('비밀번호 형식에 맞지 않습니다')

        self.password = password
        
        # 사용자의 이름이 조건을 만족하는지 확인하고, 설정합니다.
        if type(name) is not str or name == '':
            raise ValueError('이름 형식에 맞지 않습니다')
        self.name = name
        
        # 성별이 조건을 만족하는지 확인하고, 설정합니다.
        if type(gender) is not str or gender not in ['M','F','O']:
            raise ValueError('성별 형식에 맞지 않습니다')
        self.gender = gender
        
        # 친구 목록을 설정합니다.
        self.friends = []
