'''

다형성
다형성 : 같은 모양의 코드가 다른 역할을 하는 것
class Car:
    type = "자동차"
    horsePower = 100
        
class Lamborghini(Car):
    horsePower = 700
        
aventador = Lamborghini()
print(aventador.type) #자동차
print(aventador.horsePower) #700
Copy
다형성을 통해 유사한 역할을 하는 필드와 메서드를 같은 이름으로 관리할 수 있습니다.


지시사항
Animal 클래스를 만들어보고, 다음 필드와 메서드를 추가해봅시다.
필드 legs = 0
메서드 walk : 빈 문자열(“”)을 반환
Dog 클래스를 만들어봅시다. Animal 클래스를 상속받고, 필드 legs를 4로, 메서드 walk는 “살랑살랑”을 반환하도록 코드를 작성해봅시다.
Human 클래스를 만들어봅시다. Animal 클래스를 상속받고, 필드 legs를 2로, 메서드 walk는 “뚜벅뚜벅”을 반환하도록 코드를 작성해봅시다.
Dog 클래스의 인스턴스인 maltese, Human 클래스의 인스턴스인 gildong을 만들어봅시다.
'''
class Dog:
    legs = 4
    def walk(Self):
        return "살랑살랑"

class Human:
    legs = 2
    def walk(Self):
        return "뚜벅뚜벅"

maltese = Dog()
gildong = Human()

print(gildong.legs)
print(gildong.walk()) # 메쏘드 (함수) 실행 위해서는 괄호가 중요함 
