'''

[실습3 해설] 게시물 나만 보기

게시물 나만 보기
자식 클래스가 부모 클래스를 덮어 쓰는 함수 오버라이딩을 직접 사용해 봅시다.

Post는 게시물 클래스입니다. 작성자 author, 내용 content, 공유한 유저의 리스트 shared_users, 나만 보기 설정 여부 is_private을 속성으로 갖습니다. 기본적으로 “나만 보기” 설정은 꺼져 있습니다.

PrivatePost는 나만 보기로 설정된 게시물을 나타내는 클래스입니다. 다음의 두 가지 특성을 갖습니다.

생성 시점에 is_private 속성이 True로 설정되어 있습니다.
공유를 시도할 경우 적절한 메시지와 함께 TypeError가 발생하며, 공유되지 않습니다.
함수 오버라이딩을 사용하여 위의 두 조건을 만족하는 PrivatePost 클래스를 완성해 보세요.


조건에 맞게 클래스를 완성했다면, 직접 인스턴스를 생성하여 테스트해 봅시다. 잘 작동하는 것 같으면, 제출 버튼을 눌러 채점해 보세요.

'''

class Post: # Post Class 생성 
    def __init__(self, author, content): # 생성자 (초기 셋)
        self.author = author # 사용자 매개변수 정의 
        self.content = content
        self.shared_users = [] # 저장되는 user는 True --> False로 변경됨 (공용 계시물)
        self.is_private = False # 최초 등록시 True (공유 불가)

    def share(self, user): # 속성 (Attribute) : 변수/필드(user)와 Method (함수,append)의 집합, 인스턴스 : 함수를 가지고 만들어진 예시
        self.shared_users.append(user) # 계시판 수정 허용 사용자를 계속 추가 하는 방법 (사전 정의가 좋은 방법임)
        
class PrivatePost(Post): # 부모보다 먼저 적용함 
    def __init__(self, author, content):
        super().__init__(author, content) # author, content를 부모에게 전달 
        self.is_private = True # 처음 생성 시점에 True임 
    def share(self, user):
        raise TypeError("공유가 불가능한 게시물입니다.")

my_post = PrivatePost("LG", "content") # 객체화후 활용 가능 
print(my_post.author) #객체화된 my_post의 변수 출력 
print(my_post.content)
